// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_MIGRATION_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  email                       String         @unique
  password                    String?
  emailVerified               Boolean        @default(false)
  verifyEmailToken            String?
  verifyEmailTokenExpiresAt   DateTime? @db.Timestamptz(3)
  provider                    String?
  providerId                  String?
  passwordResetToken          String?
  passwordResetTokenExpiresAt DateTime? @db.Timestamptz(3)
  expireSessionsOlderThan     DateTime? @db.Timestamptz(3)
  memberships                 Membership[]
  subscriptions               Subscription[]
}

model AuditLog {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  timestamp           DateTime @default(now()) @db.Timestamptz(3)
  entityName          String
  entityId            String   @db.Uuid // No FK to keep deleted entities logs
  tenantId            String?  @db.Uuid // No FK to keep deleted entities logs
  userId              String?  @db.Uuid // No FK to keep deleted entities logs
  membershipId        String?  @db.Uuid // No FK to keep deleted entities logs
  apiKeyId            String?  @db.Uuid // No FK to keep deleted entities logs
  apiEndpoint         String?
  apiHttpResponseCode String?
  operation           String
  oldData             Json?
  newData             Json?
  transactionId       BigInt   @default(dbgenerated("txid_current()"))
}

model ApiKey {
  id                    String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId              String      @default(dbgenerated("NULLIF((current_setting('app.current_tenant_id'::text)), '')::uuid")) @db.Uuid
  tenant                Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt             DateTime    @default(now()) @db.Timestamptz(3)
  createdByUserId       String?     @default(dbgenerated("NULLIF((current_setting('app.current_user_id'::text)), '')::uuid")) @db.Uuid
  createdByMembershipId String?     @default(dbgenerated("NULLIF((current_setting('app.current_membership_id'::text)), '')::uuid")) @db.Uuid
  createdByMembership   Membership? @relation("createdByMembership", fields: [createdByMembershipId], references: [id], onDelete: SetNull)
  updatedAt             DateTime    @updatedAt @db.Timestamptz(3)
  updatedByUserId       String?     @default(dbgenerated("NULLIF((current_setting('app.current_user_id'::text)), '')::uuid")) @db.Uuid
  updatedByMembershipId String?     @default(dbgenerated("NULLIF((current_setting('app.current_membership_id'::text)), '')::uuid")) @db.Uuid
  updatedByMembership   Membership? @relation("updatedByMembership", fields: [updatedByMembershipId], references: [id], onDelete: SetNull)

  name      String
  keyPrefix String
  secret    String    @unique
  scopes    String[]
  expiresAt DateTime? @db.Timestamptz(3)

  disabledAt DateTime? @db.Timestamptz(3)

  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  membershipId String     @db.Uuid

  @@unique([id, tenantId])
  @@unique([id, tenantId, membershipId])
}

model Tenant {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt       DateTime @default(now()) @db.Timestamptz(3)
  createdByUserId String?  @default(dbgenerated("NULLIF((current_setting('app.current_user_id'::text)), '')::uuid")) @db.Uuid
  updatedAt       DateTime @updatedAt @db.Timestamptz(3)
  updatedByUserId String?  @default(dbgenerated("NULLIF((current_setting('app.current_user_id'::text)), '')::uuid")) @db.Uuid

  name String

  memberships   Membership[]
  subscriptions Subscription[]
  apiKeys       ApiKey[]

  dataSourceTenant DataSource[]
  dataSetTenant DataSet[]
  dataCapTenant DataCap[]
}

enum MembershipStatus {
  active
  disabled
  invited
}

model Membership {
  id                    String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId              String      @default(dbgenerated("NULLIF((current_setting('app.current_tenant_id'::text)), '')::uuid")) @db.Uuid
  tenant                Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt             DateTime    @default(now()) @db.Timestamptz(3)
  createdByUserId       String?     @default(dbgenerated("NULLIF((current_setting('app.current_user_id'::text)), '')::uuid")) @db.Uuid
  createdByMembershipId String?     @default(dbgenerated("NULLIF((current_setting('app.current_membership_id'::text)), '')::uuid")) @db.Uuid
  createdByMembership   Membership? @relation("createdByMembership", fields: [createdByMembershipId], references: [id], onDelete: SetNull)
  updatedAt             DateTime    @updatedAt @db.Timestamptz(3)
  updatedByUserId       String?     @default(dbgenerated("NULLIF((current_setting('app.current_user_id'::text)), '')::uuid")) @db.Uuid
  updatedByMembershipId String?     @default(dbgenerated("NULLIF((current_setting('app.current_membership_id'::text)), '')::uuid")) @db.Uuid
  updatedByMembership   Membership? @relation("updatedByMembership", fields: [updatedByMembershipId], references: [id], onDelete: SetNull)
  importHash            String?     @unique

  userId          String           @db.Uuid
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName       String?
  lastName        String?
  fullName        String?
  avatars         Json?
  roles           String[]
  invitationToken String?          @unique
  apiKeys         ApiKey[]
  subscriptions   Subscription[]
  status          MembershipStatus @default(active)

  membershipCreatedBy Membership[] @relation("createdByMembership")
  membershipUpdatedBy Membership[] @relation("updatedByMembership")
  apiKeyCreatedBy ApiKey[] @relation("createdByMembership")
  apiKeyUpdatedBy ApiKey[] @relation("updatedByMembership")

  dataSourceCreatedBy DataSource[] @relation("createdByMembership") 
  dataSourceUpdatedBy DataSource[] @relation("updatedByMembership")

  dataSetCreatedBy DataSet[] @relation("createdByMembership") 
  dataSetUpdatedBy DataSet[] @relation("updatedByMembership")

  dataCapCreatedBy DataCap[] @relation("createdByMembership") 
  dataCapUpdatedBy DataCap[] @relation("updatedByMembership")


  @@unique([id, tenantId])
  @@unique([userId, tenantId])
}

enum SubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

enum SubscriptionMode {
  user
  tenant
  membership
  disabled
}

model Subscription {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId  String?  @db.Uuid
  tenant    Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  membershipId         String?            @db.Uuid
  membership           Membership?        @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  userId               String             @db.Uuid
  user                 User               @relation(fields: [userId], references: [id])
  mode                 SubscriptionMode
  isCancelAtEndPeriod  Boolean            @default(false)
  stripeCustomerId     String
  stripeSubscriptionId String             @unique
  stripePriceId        String
  status               SubscriptionStatus
}

model DataSource {
  id                    String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId              String      @default(dbgenerated("NULLIF((current_setting('app.current_tenant_id'::text)), '')::uuid")) @db.Uuid
  tenant                Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt             DateTime    @default(now()) @db.Timestamptz(3)
  createdByUserId       String?     @default(dbgenerated("NULLIF((current_setting('app.current_user_id'::text)), '')::uuid")) @db.Uuid
  createdByMembershipId String?     @default(dbgenerated("NULLIF((current_setting('app.current_membership_id'::text)), '')::uuid")) @db.Uuid
  createdByMembership   Membership? @relation("createdByMembership", fields: [createdByMembershipId], references: [id], onDelete: SetNull)
  updatedAt             DateTime    @updatedAt @db.Timestamptz(3)
  updatedByUserId       String?     @default(dbgenerated("NULLIF((current_setting('app.current_user_id'::text)), '')::uuid")) @db.Uuid
  updatedByMembershipId String?     @default(dbgenerated("NULLIF((current_setting('app.current_membership_id'::text)), '')::uuid")) @db.Uuid
  updatedByMembership   Membership? @relation("updatedByMembership", fields: [updatedByMembershipId], references: [id], onDelete: SetNull)
  importHash            String?     @unique

  name String
  sourceType String
  sizeInTiB Int
  sourceURL String?
  datasetId String @db.Uuid
  dataset DataSet @relation("dataset_datasources", fields: [datasetId], references: [id])



  @@unique([id, tenantId])
}

model DataSet {
  id                    String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId              String      @default(dbgenerated("NULLIF((current_setting('app.current_tenant_id'::text)), '')::uuid")) @db.Uuid
  tenant                Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt             DateTime    @default(now()) @db.Timestamptz(3)
  createdByUserId       String?     @default(dbgenerated("NULLIF((current_setting('app.current_user_id'::text)), '')::uuid")) @db.Uuid
  createdByMembershipId String?     @default(dbgenerated("NULLIF((current_setting('app.current_membership_id'::text)), '')::uuid")) @db.Uuid
  createdByMembership   Membership? @relation("createdByMembership", fields: [createdByMembershipId], references: [id], onDelete: SetNull)
  updatedAt             DateTime    @updatedAt @db.Timestamptz(3)
  updatedByUserId       String?     @default(dbgenerated("NULLIF((current_setting('app.current_user_id'::text)), '')::uuid")) @db.Uuid
  updatedByMembershipId String?     @default(dbgenerated("NULLIF((current_setting('app.current_membership_id'::text)), '')::uuid")) @db.Uuid
  updatedByMembership   Membership? @relation("updatedByMembership", fields: [updatedByMembershipId], references: [id], onDelete: SetNull)
  importHash            String?     @unique

  name String
  dataOwnerName String?
  dataOwnerCountry String?
  dataOwnerContinent String?
  dataSetIndustry String?
  dataOwnerRelation String?
  description String?
  website String?
  clientAddress String
  metadataUpload Json?
  datasources DataSource[] @relation("dataset_datasources")

  datacaps DataCap[] @relation("datacaps_dataset")


  @@unique([clientAddress, tenantId])
  @@unique([id, tenantId])
}

model DataCap {
  id                    String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId              String      @default(dbgenerated("NULLIF((current_setting('app.current_tenant_id'::text)), '')::uuid")) @db.Uuid
  tenant                Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt             DateTime    @default(now()) @db.Timestamptz(3)
  createdByUserId       String?     @default(dbgenerated("NULLIF((current_setting('app.current_user_id'::text)), '')::uuid")) @db.Uuid
  createdByMembershipId String?     @default(dbgenerated("NULLIF((current_setting('app.current_membership_id'::text)), '')::uuid")) @db.Uuid
  createdByMembership   Membership? @relation("createdByMembership", fields: [createdByMembershipId], references: [id], onDelete: SetNull)
  updatedAt             DateTime    @updatedAt @db.Timestamptz(3)
  updatedByUserId       String?     @default(dbgenerated("NULLIF((current_setting('app.current_user_id'::text)), '')::uuid")) @db.Uuid
  updatedByMembershipId String?     @default(dbgenerated("NULLIF((current_setting('app.current_membership_id'::text)), '')::uuid")) @db.Uuid
  updatedByMembership   Membership? @relation("updatedByMembership", fields: [updatedByMembershipId], references: [id], onDelete: SetNull)
  importHash            String?     @unique

  tranche Int
  clientAddress String
  amountInTiB Int?
  filPerTiB Decimal?
  filTotal Decimal?
  paymentAddress String?
  paymentTx String?
  grantTx String?
  status String?
  datasetId String @db.Uuid
  dataset DataSet @relation("datacaps_dataset", fields: [datasetId], references: [id])



  @@unique([id, tenantId])
}
